#!/usr/bin/env ruby

require 'rainbow'
require 'logger'
require 'mechanize'
require 'cross'
require 'getoptlong'
require 'codesake-commons'

$logger = Codesake::Commons::Logging.instance
$logger.toggle_syslog

opts = GetoptLong.new(
  [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
  [ '--version', '-v', GetoptLong::NO_ARGUMENT ],
  ['--debug', '-D', GetoptLong::NO_ARGUMENT ],
  ['--oneshot', '-1', GetoptLong::NO_ARGUMENT ],
  ['--sample-post', '-S', GetoptLong::REQUIRED_ARGUMENT ],
  ['--tamper', '-t', GetoptLong::REQUIRED_ARGUMENT ],
  ['--exploit-url', '-u', GetoptLong::NO_ARGUMENT ],
  ['--crawl', '-c', GetoptLong::OPTIONAL_ARGUMENT ], 
  ['--user', '-U', GetoptLong::REQUIRED_ARGUMENT ],
  ['--password', '-P', GetoptLong::REQUIRED_ARGUMENT ]
)
trap("INT") { $logger.die "SIGINT detected. Giving up" }

options = {:exploit_url=>false, 
  :debug=>false, 
  :oneshot=>false, 
  :sample_post=>"", 
  :parameter_to_tamper=>"", 
  :crawl=>{:enabled=>false, :url_prefix=>nil}, 
  :auth=>{:username=>nil, :password=>nil}
}

opts.each do |opt, arg| 
  case opt
  when '--help'
    puts "usage: cross [-uDhv] target"
    puts "     -u: exploits the URL string instead of looking at the form values"
    puts "     -D: turns debug on"
    puts "     -v: shows version"
    puts "     -h: this help"
    exit 0
  when '--version'
    puts "cross " + Cross::VERSION + " (C) 2011, 2012 - paolo@armoredcode.com"
    exit 0
  when '--oneshot'
    options[:oneshot] = true
  when '--tamper'
    # This option force cross to tamper only the specified form field
    options[:parameter_to_tamper] = arg unless arg.nil?
  when '--sample-post' 
    options[:sample_post] = arg unless File.exist?(arg)
    options[:sample_post] = File.read(arg) if File.exist?(arg) && File.readable?(arg)
  when '--debug'
    options[:debug]=true
  when '--exploit-url'
    options[:exploit_url]=true

  when '--crawl'
    options[:crawl][:enabled]=true
    options[:crawl][:url_prefix] = arg unless arg.nil?
  when '--user'
    options[:auth][:username]=arg
  when '--password'
    options[:auth][:password]=arg
  end
end

$logger.helo "cross " + Cross::VERSION + " is starting up"

engine = Cross::Engine.instance
engine.start(options)

found = false
$logger.die "missing target" if ARGV.length != 1
$logger.die "-S and -t flag must be used together" if (options[:sample_post].empty? && ! options[:parameter_to_tamper].empty?) or (! options[:sample_post].empty? && options[:parameter_to_tamper].empty?)

if engine.crawl?
  result = engine.crawl(ARGV.shift)
  $logger.die result[:message] if result[:status] == 'KO'

  
  result[:links].each do |l|
    $logger.log "Exploiting: #{options[:crawl][:url_prefix]+l}"

    found = engine.inject(options[:crawl][:url_prefix]+l) 
    $logger.ok "Canary found in output page. Suspected XSS" if found
  end
else
  found = engine.inject(ARGV.shift)
  $logger.ok "Canary found in output page. Suspected XSS" if found
end

$logger.err "Canary not found" if ! found
$logger.helo "cross is leaving"
